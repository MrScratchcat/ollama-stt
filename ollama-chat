#!/bin/bash
continue=0

banner () {
echo " ▒█████   ██▓     ██▓    ▄▄▄       ███▄ ▄███▓ ▄▄▄      "
echo "▒██▒  ██▒▓██▒    ▓██▒   ▒████▄    ▓██▒▀█▀ ██▒▒████▄    "
echo "▒██░  ██▒▒██░    ▒██░   ▒██  ▀█▄  ▓██    ▓██░▒██  ▀█▄  "
echo "▒██   ██░▒██░    ▒██░   ░██▄▄▄▄██ ▒██    ▒██ ░██▄▄▄▄██ "
echo "░ ████▓▒░░██████▒░██████▒▓█   ▓██▒▒██▒   ░██▒ ▓█   ▓██▒"
echo "░ ▒░▒░▒░ ░ ▒░▓  ░░ ▒░▓  ░▒▒   ▓▒█░░ ▒░   ░  ░ ▒▒   ▓▒█░"
echo "  ░ ▒ ▒░ ░ ░ ▒  ░░ ░ ▒  ░ ▒   ▒▒ ░░  ░      ░  ▒   ▒▒ ░"
echo "░ ░ ░ ▒    ░ ░     ░ ░    ░   ▒   ░      ░     ░   ▒   "
echo "    ░ ░      ░  ░    ░  ░     ░  ░       ░         ░  ░"
echo "                                                       "
}

clear 
banner
export PATH="$PATH:$HOME/.local/bin"
link="http://localhost:11434"
folder=${HOME}/.ollama-chat/
history_file="${folder}chat-history.json"
model="llava"
echo "1. typing to respond"
echo "2. speaking to respond (BETA)"
read -r -p "Option: " choice

if [[ "$choice" == "1" ]]; then
  continue=1
elif [[ "$choice" == "2" ]]; then
  continue=1
fi 

if [[ "$continue" == "0" ]]; then
  echo "didn't make a choice exiting..."
  exit
elif [[ "$continue" == "1" ]]; then
  continue=0
fi

clear
banner

echo "1. Let your ai talk with voice"
echo "2. Let your ai talk with text"
read -r -p "Option: " choice2

if [[ "$choice2" == "1" ]]; then
  continue=1
elif [[ "$choice2" == "2" ]]; then
  continue=1
fi 

if [[ "$continue" == "0" ]]; then
  echo "didn't make a choice exiting..."
  exit
elif [[ "$continue" == "1" ]]; then
  continue=0
fi

clear
banner

user_prompt () {
  if [[ "$choice" == "2" ]]; then
    mpv ${folder}start-talking.wav &
    sox -d ${folder}speech.wav silence 1 0.1 1% 1 2.0 1%
    mpv ${folder}stop-talking.wav &
    pipx run vosk --model ${folder}voskmodels/* --input ${folder}speech.wav --output ${folder}transcription.txt
    cat ${folder}transcription.txt
    rm ${folder}speech.wav
    user_input=$(cat ${folder}transcription.txt)
  elif [[ "$choice" == "1" ]]; then
    echo -n "You: "
    read user_input
  fi
}

initialize_history() {
  if [[ ! -f "$history_file" ]]; then
    echo '{"model": "'"$model"'", "messages": []}' > "$history_file"
  else
    jq --arg model "$model" '.model = $model' "$history_file" > tmp.json && mv tmp.json "$history_file"
  fi
}

update_model_in_history() {
  local new_model="$1"
  model="$new_model"
  jq --arg model "$new_model" '.model = $model' "$history_file" > tmp.json && mv tmp.json "$history_file"
  echo "Model updated to: $new_model"
}

add_message_to_history() {
  local role="$1"
  local content="$2"
  jq --arg role "$role" --arg content "$content" \
    '.messages += [{"role": $role, "content": $content}]' \
    "$history_file" > tmp.json && mv tmp.json "$history_file"
}

chat_with_image() {
  file=$(zenity --file-selection --title="Select a picture" --file-filter="Image files (jpg, png, gif) | *.jpg *.png *.gif")
  image=$(cat $file | base64)
  echo "image uploaded"
  user_prompt
  jq --arg role "user" --arg content "$user_input" --arg image "$image" \
      '.messages += [{"role": $role, "prompt": $content, "images": [$image]}]' \
      "$history_file" > tmp.json && mv tmp.json "$history_file"
  chat_with_ollama
}

chat_with_ollama() {
  response=$(curl -s -X POST "$link/api/chat" -d @"$history_file" | jq --unbuffered -r '.message.content' | tr -d '\n' | sed 's/\\n/ /g')
  echo -e "\nAssistant: $response"
  if [[ "$choice2" == "1" ]]; then
    if [[ "$choice" == "2" ]]; then
      edge-playback --text "$response" > /dev/null
    elif [[ "$choice" == "1" ]]; then
      edge-playback --text "$response" > /dev/null &
    fi
  fi
  add_message_to_history "assistant" "$response"
}

initialize_history

while true; do

  user_prompt

  if [[ "$user_input" == "goodbye" ]]; then
    user_input="i got to go i see you next time goodbye"
    add_message_to_history "user" "$user_input"
    chat_with_ollama
    echo "Exiting chat."
    exit
  elif [[ "$user_input" == "forget every single thing" ]]; then
    clear
    banner
    echo '{"model": "'"$model"'", "messages": []}' > "$history_file"

  elif [[ "$user_input" =~ ^model:[[:space:]]*(.*)$ ]]; then
    new_model="${BASH_REMATCH[1]}"
    update_model_in_history "$new_model"

  elif [[ "$user_input" == "look" ]]; then
    echo "Processing image..."
    chat_with_image
  elif [[ "$user_input" == "luke" ]]; then
    echo "Processing image..."
    chat_with_image
  elif [[ "$user_input" == "update" ]]; then
    update_model
  else
    add_message_to_history "user" "$user_input"
    chat_with_ollama
  fi
done
